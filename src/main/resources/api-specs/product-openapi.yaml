openapi: "3.0.3"

info:
  title: "Iced-Latte Product API"
  description: "This API allows clients to interact with an Iced Latte's product catalog, including retrieval and listing of products."
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://iced-latte.uk/backend"
    description: "Production server"

tags:
  - name: "Product"
    description: "API endpoints related to product management and retrieval."

paths:
  /api/v1/products/{productId}:
    get:
      tags:
        - "Product"
      summary: "Retrieve a Product by ID"
      description: "Fetch detailed information of a single product using its unique identifier."
      operationId: "getProductById"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "The product was found and its details are returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInfoDto"
        "404":
          description: "No product found for the given ID."
        "500":
          description: "Internal Server Error."

  /api/v1/products:
    get:
      tags:
        - "Product"
      summary: "List Products with Pagination"
      description: "Retrieve a paginated list of products, with optional sorting parameters."
      operationId: "getProducts"
      parameters:
        - name: "page"
          description: "The page number (starting from 0) for pagination."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 0
            minimum: 0
        - name: "size"
          description: "The number of products per page."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 50
            minimum: 1
            maximum: 100
        - name: "sort_attribute"
          description: "The field name of the product by which the results should be sorted."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
        - name: "sort_direction"
          description: "The direction of sorting."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
        - name: "price_from"
          description: "The lower limit of the product's price for filtering."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            minimum: 0
        - name: "price_to"
          description: "The upper limit of the product's price for filtering."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            minimum: 0
        - name: "minimum_average_rating"
          description: "The minimum average rating of the product for filtering."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            minimum: 1
        - name: "brand_names"
          description: "Filter products by selected brand names (comma-separated list)."
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
        - name: "seller_names"
          description: "Filter products by selected seller names (comma-separated list)."
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
      responses:
        "200":
          description: "Paginated list of products retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListWithPaginationInfoDto"
        "400":
          description: "Invalid parameters provided for pagination or sorting."
        "500":
          description: "Internal Server Error."

  /api/v1/products/ids:
    post:
      tags:
        - "Product"
      summary: "List Products by IDs"
      description: "Retrieve a list of products using a list of unique identifiers."
      operationId: "getProductsByIds"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductIdsDto"
      responses:
        "200":
          description: "List of products by IDs retrieved successfully."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductInfoDto"
        "400":
          description: "Invalid parameters provided."
        "500":
          description: "Internal Server Error."

components:
  schemas:
    ProductInfoDto:
      type: "object"
      required:
        - id
        - name
        - price
        - quantity
        - active
        - averageRating
        - reviewsCount
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        description:
          type: "string"
        price:
          type: "number"
          format: "decimal"
        quantity:
          type: "integer"
          format: "int32"
        active:
          type: "boolean"
        productFileUrl:
          type: "string"
        averageRating:
          type: "number"
          format: "double"
        reviewsCount:
          type: "integer"
          format: "int32"

    ProductListWithPaginationInfoDto:
      type: "object"
      required:
        - products
        - page
        - size
        - totalElements
        - totalPages
      properties:
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/ProductInfoDto"
        page:
          type: "integer"
          format: "int32"
        size:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int64"
        totalPages:
          type: "integer"
          format: "int32"

    ProductIdsDto:
      type: "object"
      required:
        - productIds
      properties:
        productIds:
          type: "array"
          items:
            type: "string"
            format: "uuid"