openapi: "3.0.3"

info:
  title: "Iced Latte Product's Review API"
  description: "API for accessing product's reviews and related operations in the Iced-Latte platform"
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://iced-latte.uk/backend"
    description: "Production server"

tags:
  - name: "Product Review"
    description: "An API for product's review creation and modification"

paths:
  /api/v1/products/{productId}/reviews:
    get:
      tags:
        - "Product Review"
      summary: "Retrieve product's reviews and ratings, endpoint is available for unauthorized users"
      operationId: "getProductReviewsAndRatings"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
        - name: "page"
          description: "The page number in order (starting from 0)."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 0
            minimum: 0
        - name: "size"
          description: "The number of product's reviews per page."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 50
            minimum: 1
            maximum: 100
        - name: "sort_attribute"
          description: "The name of the field by which the results should be sorted."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "createdAt"
        - name: "sort_direction"
          description: "The direction of the sorting."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "desc"
      responses:
        "200":
          description: "The product was found and its reviews were returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewsAndRatingsWithPagination"
        "404":
          description: "Product was not found"
        "500":
          description: "Internal server error"

    post:
      tags:
        - "Product Review"
      summary: "Add a new review for a specific product by an authorized user. If review exists, then 400 error will be returned"
      operationId: "addNewProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductReviewRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewDto"
        "400":
          description: "Bad request, e.g. review exists"
        "401":
          description: "Unauthorized access"
        "404":
          description: "Product was not found"
        "500":
          description: "Internal server error"

  /api/v1/products/{productId}/reviews/{productReviewId}:
    delete:
      tags:
        - "Product Review"
      summary: "Delete an existing product's review created by an authorized user"
      operationId: "deleteProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product"
          schema:
            type: "string"
            format: "uuid"
        - name: "productReviewId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review"
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized access"
        "404":
          description: "Product's review was not found"
        "500":
          description: "Internal server error"

  /api/v1/products/{productId}/review:
    get:
      tags:
        - "Product Review"
      summary: "Return a review created by an authorized user"
      operationId: "getProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "Review and rating are returned. All fields are null, if user left no review for the product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewDto"
        "401":
          description: "Unauthorized access"
        "500":
          description: "Internal server error"

  /api/v1/products/{productId}/reviews/statistics:
    get:
      tags:
        - "Product Review"
      summary: "Returns statistics of product's review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users"
      operationId: "getRatingAndReviewStat"
      parameters:
        - name: "productId"
          in: "path"
          description: "Id of the product to get rating for"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "Statistics of product's review and rating was retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewRatingStats"
        "404":
          description: "Product was not found"
        "500":
          description: "Internal server error"

  /api/v1/products/{productId}/reviews/{productReviewId}/likes:
    post:
      tags:
        - "Product Review"
      summary: "Like or dislike a product review, available for authorized users only"
      operationId: "addProductReviewLike"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
        - name: "productReviewId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductReviewLikeDto"
      responses:
        "200":
          description: "Review was successfully liked/disliked"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewLikeDto"
        "401":
          description: "Unauthorized access"
        "500":
          description: "Internal server error"

components:
  schemas:
    ProductReviewRequest:
      type: "object"
      properties:
        text:
          type: "string"
          minLength: 1
          maxLength: 1500
        rating:
          type: "integer"
          minimum: 1
          maximum: 5
      required:
        - text
        - rating

    ProductReviewsAndRatingsWithPagination:
      type: "object"
      properties:
        reviewsWithRatings:
          type: "array"
          items:
            $ref: "#/components/schemas/ProductReviewDto"
        page:
          type: "integer"
          format: "int32"
        size:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int64"
        totalPages:
          type: "integer"
          format: "int32"

    ProductReviewDto:
      type: "object"
      description: "Object used to group product's reviews and ratings by user"
      required:
        - productReviewId
        - productRating
        - text
        - createdAt
        - userName
        - userLastname
        - likesCount
        - dislikesCount
      properties:
        productReviewId:
          type: "string"
          format: "uuid"
        productRating:
          type: "integer"
          format: "int32"
        text:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        userName:
          type: "string"
        userLastname:
          type: "string"
        likesCount:
          type: "integer"
          format: "int32"
        dislikesCount:
          type: "integer"
          format: "int32"

    ProductReviewRatingStats:
      type: object
      properties:
        productId:
          type: string
          format: "uuid"
        avgRating:
          type: string
        reviewsCount:
          type: "integer"
          format: "int32"
        ratingMap:
          $ref: "#/components/schemas/RatingMap"
      required:
        - productId
        - avgRating
        - reviewsCount
        - ratingMap

    RatingMap:
      type: object
      properties:
        star5:
          type: "integer"
          format: "int32"
          default: 0
        star4:
          type: "integer"
          format: "int32"
          default: 0
        star3:
          type: "integer"
          format: "int32"
          default: 0
        star2:
          type: "integer"
          format: "int32"
          default: 0
        star1:
          type: "integer"
          format: "int32"
          default: 0
      required:
        - "star1"
        - "star2"
        - "star3"
        - "star4"
        - "star5"

    ProductReviewLikeDto:
      type: object
      properties:
        isLike:
          type: "boolean"
      required:
        - isLike