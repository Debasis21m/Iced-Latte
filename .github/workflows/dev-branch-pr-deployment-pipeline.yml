name: Build and Deploy

on:
  push:
    branches:
      - development

jobs:
  build-and-push-docker-image:
    name: Build and push a new docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the source code from the Github repository
        uses: actions/checkout@v4

      - name: Set DOCKER_IMAGE_TAG
        run: echo "DOCKER_IMAGE_TAG=$GITHUB_REF_NAME-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build a new docker image
        run: docker build -t ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest .

      - name: Tag a new docker image 01
        run: docker tag ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-01

      - name: Push a new docker image 01 into Dockerhub
        run: docker push ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-01

      - name: Tag a new docker image 02
        run: docker tag ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-02

      - name: Push a new docker image 02 into Dockerhub
        run: docker push ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-02

  deploy-app-to-server:
    name: Deploy application to remote server via SSH
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      - name: Set DOCKER_IMAGE_TAG
        run: echo "DOCKER_IMAGE_TAG=$GITHUB_REF_NAME-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Deploy image via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          port: ${{ secrets.DEV_SSH_PORT }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_SSH_PRIV_KEY }}
          script: |
            docker system prune --all --force
            
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ vars.DOCKER_HUB_ACCOUNT_NAME }} --password-stdin
            docker stop ${{ vars.DOCKER_CONTAINER_NAME }} || true
            docker rm ${{ vars.DOCKER_CONTAINER_NAME }} || true
            docker rmi ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }} || true
            docker pull ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-01
            docker run -d \
              --name ${{ vars.DOCKER_CONTAINER_NAME }} \
              --network=${{ vars.DOCKER_NETWORK }} \
              -e APP_SERVER_PORT=${{ vars.APP_SERVER_PORT }} \
              -e DATASOURCE_PORT=${{ vars.DATASOURCE_PORT }} \
              -e DATASOURCE_NAME=${{ vars.DATASOURCE_NAME }} \
              -e DATASOURCE_USERNAME=${{ vars.DATASOURCE_USERNAME }} \
              -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
              -e DATASOURCE_HOST=${{ vars.DATASOURCE_HOST }} \
              -e APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }} \
              -e APP_JWT_REFRESH_SECRET=${{ secrets.APP_JWT_REFRESH_SECRET }} \
              -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
              -e AWS_REGION=${{ vars.AWS_REGION }} \
              -e AWS_USER_BUCKET=${{ vars.AWS_USER_BUCKET }} \
              -e AWS_PRODUCT_BUCKET=${{ vars.AWS_PRODUCT_BUCKET }} \
              -e AWS_DEFAULT_PRODUCT_IMAGES_PATH=${{ vars.AWS_DEFAULT_PRODUCT_IMAGES_PATH }} \
              -e REDIS_PORT=${{ vars.REDIS_PORT }} \
              -v ${{ vars.APP_DATA_PATH_ON_THE_REMOTE_SERVER }}:/usr/app/logs \
              -v ${{ vars.APP_DATA_PATH_ON_THE_REMOTE_SERVER }}/products:/usr/app/products \
              ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-01
            
            docker stop ${{ vars.DOCKER_CONTAINER_NAME_2 }} || true
            docker rm ${{ vars.DOCKER_CONTAINER_NAME_2 }} || true
            docker rmi ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }} || true
            docker pull ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-02
            docker run -d \
              --name ${{ vars.DOCKER_CONTAINER_NAME_2 }} \
              --network=${{ vars.DOCKER_NETWORK }} \
              -e APP_SERVER_PORT=${{ vars.APP_SERVER_PORT }} \
              -e DATASOURCE_PORT=${{ vars.DATASOURCE_PORT }} \
              -e DATASOURCE_NAME=${{ vars.DATASOURCE_NAME }} \
              -e DATASOURCE_USERNAME=${{ vars.DATASOURCE_USERNAME }} \
              -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
              -e DATASOURCE_HOST=${{ vars.DATASOURCE_HOST }} \
              -e APP_JWT_SECRET=${{ secrets.APP_JWT_SECRET }} \
              -e APP_JWT_REFRESH_SECRET=${{ secrets.APP_JWT_REFRESH_SECRET }} \
              -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
              -e AWS_REGION=${{ vars.AWS_REGION }} \
              -e AWS_USER_BUCKET=${{ vars.AWS_USER_BUCKET }} \
              -e AWS_PRODUCT_BUCKET=${{ vars.AWS_PRODUCT_BUCKET }} \
              -e AWS_DEFAULT_PRODUCT_IMAGES_PATH=${{ vars.AWS_DEFAULT_PRODUCT_IMAGES_PATH }} \
              -e REDIS_PORT=${{ vars.REDIS_PORT }} \
              -v ${{ vars.APP_DATA_PATH_ON_THE_REMOTE_SERVER }}:/usr/app/logs \
              -v ${{ vars.APP_DATA_PATH_ON_THE_REMOTE_SERVER }}/products:/usr/app/products \
              ${{ vars.DOCKER_HUB_ACCOUNT_NAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}-02
